<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
        xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
        xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd 
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">
        
	<import resource="classpath:/spring/spring-redis.xml"/>
	
	<!-- shiro session 管理 -->
	<!-- 会话Session ID生成器 -->
	<bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>
	
	<!-- 使用redis创建、删除、查询session操作类 -->
	<bean id="jedisShiroSessionRepository" class="com.tianwen.common.session.impl.JedisShiroSessionRepository" >
		 <!-- <property name="jedisManager" ref="jedisManager"/> -->
		 <property name="redisTemplate" ref="redisTemplate"/>
	</bean>
	
	<!-- session Dao操作处理 将session存入jedis -->
	<bean id="customShiroSessionDAO" class="com.tianwen.common.session.CustomShiroSessionDAO">
	    <property name="shiroSessionRepository" ref="jedisShiroSessionRepository"/>
	    <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
	</bean>
	
	<bean id="shiroSessionListener" class="com.tianwen.common.session.listener.ShiroSessionListener">
	    <property name="shiroSessionRepository" ref="jedisShiroSessionRepository"/>
	</bean>
	
	<!-- 会话验证调度器 -->
	<bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
		<!-- 间隔多少时间检查，不配置是60分钟 -->
		<property name="interval" value="1800000"/>
		<property name="sessionManager" ref="sessionManager"/>
	</bean>
	
	<!-- session manager -->
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!-- 相隔多久检查一次session的有效性   -->
	 	<property name="sessionValidationInterval" value="1800000"/>  
	 	 <!-- session 有效时间为半小时 （毫秒单位）-->  
		<property name="globalSessionTimeout" value="1800000"/>
		<property name="sessionDAO" ref="customShiroSessionDAO"/>
		<!-- session 监听，可以多个。 -->
		<property name="sessionListeners">
			<list>
				<ref bean="shiroSessionListener"/>
			</list>
		</property>
		<!-- 间隔多少时间检查，不配置是60分钟 -->	
		<property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
		<!-- 是否开启 检测，默认开启 -->
		<property name="sessionValidationSchedulerEnabled" value="true"/>
		<!-- 是否删除无效的，默认也是开启 -->
		<property name="deleteInvalidSessions" value="true"/>
		<!-- 会话Cookie模板 -->
		<!-- <property name="sessionIdCookie" ref="sessionIdCookie"/> -->
	</bean>
	
	<!-- session管理器 -->
	<bean id="customSessionManager" class="com.tianwen.common.session.manager.SessionManager">
		<property name="shiroSessionRepository" ref="jedisShiroSessionRepository"/>
		<property name="customShiroSessionDAO" ref="customShiroSessionDAO"/>
	</bean>
	 
	<!-- session管理结束 -->
	
	
    <!-- 用户缓存操作类 -->
	<bean id="customShiroCacheManager" class="com.tianwen.common.shiro.cache.manager.CustomShiroCacheManager">
	    <property name="shiroCacheManager" ref="jedisShiroCacheManager"/>
	</bean>
    
    <!-- shiro 缓存实现，对ShiroCacheManager，采用redis的实现 -->
	<bean id="jedisShiroCacheManager" class="com.tianwen.common.shiro.cache.impl.JedisShiroCacheManager">
		<property name="redisTemplate" ref="redisTemplate"/>
		<!-- <property name="stringRedisTemplate" ref="stringRedisTemplate"/> -->
	</bean>
    
    <!-- redis缓存配置 --> 
   <!-- <bean id="jedisManager" class="com.tianwen.common.shiro.cache.JedisManager">
	    <property name="jedisPool" ref="jedisPool"/>
	</bean>--> 
     
     
    <!-- 安全框架缓存管理器 -->  
    <!-- <bean id="shiroCacheManager" class="com.tianwen.twmall.shiro.cache.ShiroCacheManager">  
        <property name="memcachedManager" ref="memcachedManager" />  
    </bean> -->
    <!-- 弃用 memcached扩展缓存管理器 -->  
    <!-- <bean id="memcachedManager" class="com.tianwen.twmall.shiro.cache.memcached.impl.MemcachedManagerImpl">  
        <constructor-arg ref="memcachedClient" />  
    </bean> -->
    
    <!-- 安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="cacheManager" ref="customShiroCacheManager" />
		<property name="realm" ref="myRealm" />
		<property name="sessionMode" value="native" />
		<!--<property name="sessionManager" ref="sessionManager" />-->
	</bean>
        
	<!-- 自定义权限拦截器 -->  
	<bean id="shiroManager" class="com.tianwen.common.shiro.manager.impl.ShiroManagerImpl"/>
    <bean id="login" class="com.tianwen.common.shiro.filter.LoginFilter"/>
     <bean id="logout" class="com.tianwen.common.shiro.filter.SystemLogoutFilter">  
       <property name="redirectUrl" value="/"/>  
     </bean>  
   <!--  <bean id="exec" class="com.tianwen.common.shiro.filter.SimpleExecutiveFilter" />
    <bean id="role" class="com.tianwen.twmall.shiro.filter.RoleFilter"/>
    <bean id="permission" class="com.tianwen.twmall.shiro.filter.PermissionFilter"/> -->
        
	<!-- 启用shrio授权注解拦截方式 -->  
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- 装配 securityManager -->
		<property name="securityManager" ref="securityManager"/>
		<!-- 配置登陆页面 -->
		<property name="loginUrl" value="/open/login"/>
		<!-- 登陆成功后的一面 -->
		<property name="successUrl" value="/user/succ/success.jsp"/>
		<!-- 验证失败页 -->
		<property name="unauthorizedUrl" value="/user/fail/unauthorized.jsp"/>
       	<!-- 具体配置需要拦截哪些 URL, 以及访问对应的 URL 时使用 Shiro 的什么 Filter 进行拦截. 改为配置文件方式 便于自定义拦截器 -->
       	<!-- <property name="filterChainDefinitions">
       		<value>
       			/index.jsp=anon
				/user/register/**=anon
				/user/fail/**=anon
				/user/add/**=authc
				/user/succ/**=authc
       		</value>
       	</property> -->
       	<property name="filterChainDefinitions" value="#{shiroManager.loadFilterChainDefinitions()}" />
       	<property name="filters">
       		<util:map>     	 
				<entry key="login" value-ref="login"></entry>
				<entry key="logout" value-ref="logout"></entry>
			<!-- 	<entry key="exec" value-ref="exec"></entry>
				<entry key="role" value-ref="role"></entry>
				<entry key="permission" value-ref="permission"></entry> -->
       		</util:map>
       	</property>
       </bean>
       
	<!-- 配置进行授权和认证的 Realm -->  
	<bean id="myRealm" class="com.tianwen.common.shiro.realm.CustomRealm"></bean>

	<!-- 凭证匹配器 -->
	<bean id="credentialsMatcher" class="com.tianwen.common.shiro.token.RetryLimitHashedCredentialsMatcher">
        <property name="hashAlgorithmName" value="MD5" /><!--加密算法为md5-->
        <property name="hashIterations" value="2" /><!--3次md5迭代-->
         <!--是否存储散列后的密码为16进制，需要和生成密码时的一样，默认是base64-->
        <property name="storedCredentialsHexEncoded" value="true" />
    </bean>
	
	<!-- 配置 Bean 后置处理器: 会自动的调用和 Spring 整合后各个组件的生命周期方法. -->  
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
</beans>